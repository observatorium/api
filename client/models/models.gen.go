// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package models

import (
	"encoding/json"
	"fmt"
)

// Defines values for AlertingRuleEvaluatedType.
const (
	AlertingRuleEvaluatedTypeAlerting AlertingRuleEvaluatedType = "alerting"
)

// Defines values for LogInstantQueryResponseResultType.
const (
	LogInstantQueryResponseResultTypeMatrix LogInstantQueryResponseResultType = "matrix"

	LogInstantQueryResponseResultTypeScalar LogInstantQueryResponseResultType = "scalar"

	LogInstantQueryResponseResultTypeStreams LogInstantQueryResponseResultType = "streams"

	LogInstantQueryResponseResultTypeString LogInstantQueryResponseResultType = "string"

	LogInstantQueryResponseResultTypeVector LogInstantQueryResponseResultType = "vector"
)

// Defines values for LogRangeQueryResponseResultType.
const (
	LogRangeQueryResponseResultTypeMatrix LogRangeQueryResponseResultType = "matrix"
)

// Defines values for MetricInstantQueryResponseResultType.
const (
	MetricInstantQueryResponseResultTypeMatrix MetricInstantQueryResponseResultType = "matrix"

	MetricInstantQueryResponseResultTypeScalar MetricInstantQueryResponseResultType = "scalar"

	MetricInstantQueryResponseResultTypeStreams MetricInstantQueryResponseResultType = "streams"

	MetricInstantQueryResponseResultTypeString MetricInstantQueryResponseResultType = "string"

	MetricInstantQueryResponseResultTypeVector MetricInstantQueryResponseResultType = "vector"
)

// Defines values for MetricRangeQueryResponseResultType.
const (
	MetricRangeQueryResponseResultTypeMatrix MetricRangeQueryResponseResultType = "matrix"
)

// Defines values for RecordingRuleEvaluatedType.
const (
	RecordingRuleEvaluatedTypeRecording RecordingRuleEvaluatedType = "recording"
)

// ActiveAlert defines model for ActiveAlert.
type ActiveAlert struct {
	ActiveAt    string                   `json:"activeAt"`
	Annotations *ActiveAlert_Annotations `json:"annotations,omitempty"`
	Labels      *ActiveAlert_Labels      `json:"labels,omitempty"`
	State       string                   `json:"state"`
	Value       string                   `json:"value"`
}

// ActiveAlert_Annotations defines model for ActiveAlert.Annotations.
type ActiveAlert_Annotations struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ActiveAlert_Labels defines model for ActiveAlert.Labels.
type ActiveAlert_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// AlertingRule defines model for AlertingRule.
type AlertingRule struct {
	Alert       string                    `json:"alert"`
	Annotations *AlertingRule_Annotations `json:"annotations,omitempty"`
	Expr        string                    `json:"expr"`
	For         *string                   `json:"for,omitempty"`
	Labels      *AlertingRule_Labels      `json:"labels,omitempty"`
}

// AlertingRule_Annotations defines model for AlertingRule.Annotations.
type AlertingRule_Annotations struct {
	AdditionalProperties map[string]string `json:"-"`
}

// AlertingRule_Labels defines model for AlertingRule.Labels.
type AlertingRule_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// AlertingRuleEvaluated defines model for AlertingRuleEvaluated.
type AlertingRuleEvaluated struct {
	Alerts         *[]ActiveAlert                     `json:"alerts,omitempty"`
	Annotations    *AlertingRuleEvaluated_Annotations `json:"annotations,omitempty"`
	Duration       *float32                           `json:"duration,omitempty"`
	EvaluationTime *float32                           `json:"evaluationTime,omitempty"`
	Health         *string                            `json:"health,omitempty"`
	Labels         *AlertingRuleEvaluated_Labels      `json:"labels,omitempty"`
	LastError      *string                            `json:"lastError,omitempty"`
	LastEvaluation *string                            `json:"lastEvaluation,omitempty"`
	Name           string                             `json:"name"`
	Query          string                             `json:"query"`
	Type           *AlertingRuleEvaluatedType         `json:"type,omitempty"`
}

// AlertingRuleEvaluated_Annotations defines model for AlertingRuleEvaluated.Annotations.
type AlertingRuleEvaluated_Annotations struct {
	AdditionalProperties map[string]string `json:"-"`
}

// AlertingRuleEvaluated_Labels defines model for AlertingRuleEvaluated.Labels.
type AlertingRuleEvaluated_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// AlertingRuleEvaluatedType defines model for AlertingRuleEvaluated.Type.
type AlertingRuleEvaluatedType string

// InstantVectors defines model for InstantVectors.
type InstantVectors struct {
	Metric InstantVectors_Metric `json:"metric"`
	Values []ScalarOrString      `json:"values"`
}

// InstantVectors_Metric defines model for InstantVectors.Metric.
type InstantVectors_Metric struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LogInstantQueryResponse defines model for LogInstantQueryResponse.
type LogInstantQueryResponse struct {
	Result     []interface{}                     `json:"result"`
	ResultType LogInstantQueryResponseResultType `json:"resultType"`
}

// LogInstantQueryResponseResultType defines model for LogInstantQueryResponse.ResultType.
type LogInstantQueryResponseResultType string

// LogRangeQueryResponse defines model for LogRangeQueryResponse.
type LogRangeQueryResponse struct {
	Result     []interface{}                   `json:"result"`
	ResultType LogRangeQueryResponseResultType `json:"resultType"`
}

// LogRangeQueryResponseResultType defines model for LogRangeQueryResponse.ResultType.
type LogRangeQueryResponseResultType string

// LogSeriesRequest defines model for LogSeriesRequest.
type LogSeriesRequest struct {
	End   *string  `json:"end,omitempty"`
	Match []string `json:"match[]"`
	Start *string  `json:"start,omitempty"`
}

// MetricInstantQueryResponse defines model for MetricInstantQueryResponse.
type MetricInstantQueryResponse struct {
	Result     []interface{}                        `json:"result"`
	ResultType MetricInstantQueryResponseResultType `json:"resultType"`
}

// MetricInstantQueryResponseResultType defines model for MetricInstantQueryResponse.ResultType.
type MetricInstantQueryResponseResultType string

// MetricRangeQueryResponse defines model for MetricRangeQueryResponse.
type MetricRangeQueryResponse struct {
	Result     []interface{}                      `json:"result"`
	ResultType MetricRangeQueryResponseResultType `json:"resultType"`
}

// MetricRangeQueryResponseResultType defines model for MetricRangeQueryResponse.ResultType.
type MetricRangeQueryResponseResultType string

// PushLogs defines model for PushLogs.
type PushLogs struct {
	Stream PushLogs_Stream  `json:"stream"`
	Values []ScalarOrString `json:"values"`
}

// PushLogs_Stream defines model for PushLogs.Stream.
type PushLogs_Stream struct {
	AdditionalProperties map[string]string `json:"-"`
}

// RangeVectors defines model for RangeVectors.
type RangeVectors struct {
	Metric RangeVectors_Metric `json:"metric"`
	Values []ScalarOrString    `json:"values"`
}

// RangeVectors_Metric defines model for RangeVectors.Metric.
type RangeVectors_Metric struct {
	AdditionalProperties map[string]string `json:"-"`
}

// RecordingRule defines model for RecordingRule.
type RecordingRule struct {
	Expr   string                `json:"expr"`
	Labels *RecordingRule_Labels `json:"labels,omitempty"`
	Record string                `json:"record"`
}

// RecordingRule_Labels defines model for RecordingRule.Labels.
type RecordingRule_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// RecordingRuleEvaluated defines model for RecordingRuleEvaluated.
type RecordingRuleEvaluated struct {
	EvaluationTime *float32                       `json:"evaluationTime,omitempty"`
	Health         *string                        `json:"health,omitempty"`
	Labels         *RecordingRuleEvaluated_Labels `json:"labels,omitempty"`
	LastError      *string                        `json:"lastError,omitempty"`
	LastEvaluation *string                        `json:"lastEvaluation,omitempty"`
	Name           string                         `json:"name"`
	Query          string                         `json:"query"`
	Type           *RecordingRuleEvaluatedType    `json:"type,omitempty"`
}

// RecordingRuleEvaluated_Labels defines model for RecordingRuleEvaluated.Labels.
type RecordingRuleEvaluated_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// RecordingRuleEvaluatedType defines model for RecordingRuleEvaluated.Type.
type RecordingRuleEvaluatedType string

// RuleGroup defines model for RuleGroup.
type RuleGroup struct {
	Interval *float32      `json:"interval,omitempty"`
	Name     string        `json:"name"`
	Rules    []interface{} `json:"rules"`
}

// RuleGroupEvaluated defines model for RuleGroupEvaluated.
type RuleGroupEvaluated struct {
	EvaluationTime          *float32      `json:"evaluationTime,omitempty"`
	File                    *string       `json:"file,omitempty"`
	Interval                *float32      `json:"interval,omitempty"`
	LastEvaluation          *string       `json:"lastEvaluation,omitempty"`
	Limit                   *float32      `json:"limit,omitempty"`
	Name                    string        `json:"name"`
	PartialResponseStrategy *string       `json:"partialResponseStrategy,omitempty"`
	Rules                   []interface{} `json:"rules"`
}

// Rules defines model for Rules.
type Rules struct {
	Groups []RuleGroupEvaluated `json:"groups"`
}

// RulesRaw defines model for RulesRaw.
type RulesRaw struct {
	Groups []RuleGroup `json:"groups"`
}

// ScalarOrString defines model for ScalarOrString.
type ScalarOrString []interface{}

// StreamValues defines model for StreamValues.
type StreamValues struct {
	Stream StreamValues_Stream `json:"stream"`
	Values []ScalarOrString    `json:"values"`
}

// StreamValues_Stream defines model for StreamValues.Stream.
type StreamValues_Stream struct {
	AdditionalProperties map[string]string `json:"-"`
}

// TailLogs defines model for TailLogs.
type TailLogs struct {
	Labels    TailLogs_Labels `json:"labels"`
	Timestamp string          `json:"timestamp"`
}

// TailLogs_Labels defines model for TailLogs.Labels.
type TailLogs_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Getter for additional properties for ActiveAlert_Annotations. Returns the specified
// element and whether it was found
func (a ActiveAlert_Annotations) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ActiveAlert_Annotations
func (a *ActiveAlert_Annotations) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ActiveAlert_Annotations to handle AdditionalProperties
func (a *ActiveAlert_Annotations) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ActiveAlert_Annotations to handle AdditionalProperties
func (a ActiveAlert_Annotations) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ActiveAlert_Labels. Returns the specified
// element and whether it was found
func (a ActiveAlert_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ActiveAlert_Labels
func (a *ActiveAlert_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ActiveAlert_Labels to handle AdditionalProperties
func (a *ActiveAlert_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ActiveAlert_Labels to handle AdditionalProperties
func (a ActiveAlert_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AlertingRule_Annotations. Returns the specified
// element and whether it was found
func (a AlertingRule_Annotations) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AlertingRule_Annotations
func (a *AlertingRule_Annotations) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AlertingRule_Annotations to handle AdditionalProperties
func (a *AlertingRule_Annotations) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AlertingRule_Annotations to handle AdditionalProperties
func (a AlertingRule_Annotations) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AlertingRule_Labels. Returns the specified
// element and whether it was found
func (a AlertingRule_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AlertingRule_Labels
func (a *AlertingRule_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AlertingRule_Labels to handle AdditionalProperties
func (a *AlertingRule_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AlertingRule_Labels to handle AdditionalProperties
func (a AlertingRule_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AlertingRuleEvaluated_Annotations. Returns the specified
// element and whether it was found
func (a AlertingRuleEvaluated_Annotations) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AlertingRuleEvaluated_Annotations
func (a *AlertingRuleEvaluated_Annotations) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AlertingRuleEvaluated_Annotations to handle AdditionalProperties
func (a *AlertingRuleEvaluated_Annotations) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AlertingRuleEvaluated_Annotations to handle AdditionalProperties
func (a AlertingRuleEvaluated_Annotations) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AlertingRuleEvaluated_Labels. Returns the specified
// element and whether it was found
func (a AlertingRuleEvaluated_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AlertingRuleEvaluated_Labels
func (a *AlertingRuleEvaluated_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AlertingRuleEvaluated_Labels to handle AdditionalProperties
func (a *AlertingRuleEvaluated_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AlertingRuleEvaluated_Labels to handle AdditionalProperties
func (a AlertingRuleEvaluated_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for InstantVectors_Metric. Returns the specified
// element and whether it was found
func (a InstantVectors_Metric) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for InstantVectors_Metric
func (a *InstantVectors_Metric) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for InstantVectors_Metric to handle AdditionalProperties
func (a *InstantVectors_Metric) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for InstantVectors_Metric to handle AdditionalProperties
func (a InstantVectors_Metric) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PushLogs_Stream. Returns the specified
// element and whether it was found
func (a PushLogs_Stream) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PushLogs_Stream
func (a *PushLogs_Stream) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PushLogs_Stream to handle AdditionalProperties
func (a *PushLogs_Stream) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PushLogs_Stream to handle AdditionalProperties
func (a PushLogs_Stream) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RangeVectors_Metric. Returns the specified
// element and whether it was found
func (a RangeVectors_Metric) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RangeVectors_Metric
func (a *RangeVectors_Metric) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RangeVectors_Metric to handle AdditionalProperties
func (a *RangeVectors_Metric) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RangeVectors_Metric to handle AdditionalProperties
func (a RangeVectors_Metric) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RecordingRule_Labels. Returns the specified
// element and whether it was found
func (a RecordingRule_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RecordingRule_Labels
func (a *RecordingRule_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RecordingRule_Labels to handle AdditionalProperties
func (a *RecordingRule_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RecordingRule_Labels to handle AdditionalProperties
func (a RecordingRule_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RecordingRuleEvaluated_Labels. Returns the specified
// element and whether it was found
func (a RecordingRuleEvaluated_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RecordingRuleEvaluated_Labels
func (a *RecordingRuleEvaluated_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RecordingRuleEvaluated_Labels to handle AdditionalProperties
func (a *RecordingRuleEvaluated_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RecordingRuleEvaluated_Labels to handle AdditionalProperties
func (a RecordingRuleEvaluated_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StreamValues_Stream. Returns the specified
// element and whether it was found
func (a StreamValues_Stream) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StreamValues_Stream
func (a *StreamValues_Stream) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StreamValues_Stream to handle AdditionalProperties
func (a *StreamValues_Stream) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StreamValues_Stream to handle AdditionalProperties
func (a StreamValues_Stream) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TailLogs_Labels. Returns the specified
// element and whether it was found
func (a TailLogs_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TailLogs_Labels
func (a *TailLogs_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TailLogs_Labels to handle AdditionalProperties
func (a *TailLogs_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TailLogs_Labels to handle AdditionalProperties
func (a TailLogs_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
