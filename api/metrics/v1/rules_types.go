// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package v1

import (
	"encoding/json"
	"fmt"
)

// Rule defines model for Rule.
type Rule struct {
	Expr   *string      `json:"expr,omitempty"`
	Labels *Rule_Labels `json:"labels,omitempty"`
	Record *string      `json:"record,omitempty"`
}

// Rule_Labels defines model for Rule.Labels.
type Rule_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// RuleGroup defines model for RuleGroup.
type RuleGroup struct {
	Interval *string `json:"interval,omitempty"`
	Name     *string `json:"name,omitempty"`
	Rules    *[]Rule `json:"rules,omitempty"`
}

// Rules defines model for Rules.
type Rules struct {
	Groups *[]RuleGroup `json:"groups,omitempty"`
}

// Getter for additional properties for Rule_Labels. Returns the specified
// element and whether it was found
func (a Rule_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Rule_Labels
func (a *Rule_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Rule_Labels to handle AdditionalProperties
func (a *Rule_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Rule_Labels to handle AdditionalProperties
func (a Rule_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
