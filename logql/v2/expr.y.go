// Code generated by goyacc -p expr -o logql/v2/expr.y.go logql/v2/expr.y. DO NOT EDIT.

package v2

import (
	__yyfmt__ "fmt"
	"time"

	"github.com/prometheus/prometheus/model/labels"
)

type exprSymType struct {
	yys                int
	Expr               Expr
	LogBinaryOpExpr    LogBinaryOpExpr
	LogFilterExpr      *LogFilterExpr
	LogLabelFilterExpr *LogLabelFilterExpr
	LogFormatExpr      *LogFormatExpr
	LogQueryExpr       LogSelectorExpr
	LogMetricExpr      LogMetricSampleExpr
	LogNumberExpr      LogNumberExpr
	LogPipelineExpr    LogPipelineExpr
	LogStageExpr       LogStageExpr
	LogRangeQueryExpr  LogSelectorExpr
	LogOffsetExpr      *LogOffsetExpr
	Matcher            *labels.Matcher
	Matchers           []*labels.Matcher
	MetricOp           string
	BinaryOpOptions    BinaryOpOptions
	Range              string
	Filter             string
	Selector           []*labels.Matcher
	Grouping           *grouping
	Labels             []string
	str                string
	binaryOp           string
	ComparisonOp       string
	duration           time.Duration
	ConvOp             string
}

const IDENTIFIER = 57346
const STRING = 57347
const RANGE = 57348
const NUMBER = 57349
const DURATION = 57350
const MATCHERS = 57351
const LABELS = 57352
const EQ = 57353
const RE = 57354
const NRE = 57355
const OPEN_BRACE = 57356
const CLOSE_BRACE = 57357
const OPEN_BRACKET = 57358
const CLOSE_BRACKET = 57359
const COMMA = 57360
const DOT = 57361
const OPEN_PARENTHESIS = 57362
const CLOSE_PARENTHESIS = 57363
const COUNT_OVER_TIME = 57364
const RATE = 57365
const RATE_COUNTER = 57366
const SUM = 57367
const AVG = 57368
const MAX = 57369
const MIN = 57370
const COUNT = 57371
const STDDEV = 57372
const STDVAR = 57373
const BOTTOMK = 57374
const TOPK = 57375
const BYTES_OVER_TIME = 57376
const BYTES_RATE = 57377
const BOOL = 57378
const JSON = 57379
const REGEXP = 57380
const LOGFMT = 57381
const PIPE_MATCH = 57382
const PIPE_EXACT = 57383
const PIPE = 57384
const LINE_FMT = 57385
const LABEL_FMT = 57386
const UNWRAP = 57387
const AVG_OVER_TIME = 57388
const SUM_OVER_TIME = 57389
const MIN_OVER_TIME = 57390
const MAX_OVER_TIME = 57391
const STDVAR_OVER_TIME = 57392
const STDDEV_OVER_TIME = 57393
const QUANTILE_OVER_TIME = 57394
const FIRST_OVER_TIME = 57395
const LAST_OVER_TIME = 57396
const ABSENT_OVER_TIME = 57397
const BY = 57398
const WITHOUT = 57399
const VECTOR = 57400
const LABEL_REPLACE = 57401
const IP = 57402
const UNPACK = 57403
const PATTERN = 57404
const OFFSET = 57405
const BYTES_CONV = 57406
const DURATION_CONV = 57407
const DURATION_SECONDS_CONV = 57408
const ON = 57409
const IGNORING = 57410
const GROUP_LEFT = 57411
const GROUP_RIGHT = 57412
const DECOLORIZE = 57413
const OR = 57414
const AND = 57415
const UNLESS = 57416
const CMP_EQ = 57417
const NEQ = 57418
const LT = 57419
const LTE = 57420
const GT = 57421
const GTE = 57422
const ADD = 57423
const SUB = 57424
const MUL = 57425
const DIV = 57426
const MOD = 57427
const POW = 57428

var exprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"RANGE",
	"NUMBER",
	"DURATION",
	"MATCHERS",
	"LABELS",
	"EQ",
	"RE",
	"NRE",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_BRACKET",
	"CLOSE_BRACKET",
	"COMMA",
	"DOT",
	"OPEN_PARENTHESIS",
	"CLOSE_PARENTHESIS",
	"COUNT_OVER_TIME",
	"RATE",
	"RATE_COUNTER",
	"SUM",
	"AVG",
	"MAX",
	"MIN",
	"COUNT",
	"STDDEV",
	"STDVAR",
	"BOTTOMK",
	"TOPK",
	"BYTES_OVER_TIME",
	"BYTES_RATE",
	"BOOL",
	"JSON",
	"REGEXP",
	"LOGFMT",
	"PIPE_MATCH",
	"PIPE_EXACT",
	"PIPE",
	"LINE_FMT",
	"LABEL_FMT",
	"UNWRAP",
	"AVG_OVER_TIME",
	"SUM_OVER_TIME",
	"MIN_OVER_TIME",
	"MAX_OVER_TIME",
	"STDVAR_OVER_TIME",
	"STDDEV_OVER_TIME",
	"QUANTILE_OVER_TIME",
	"FIRST_OVER_TIME",
	"LAST_OVER_TIME",
	"ABSENT_OVER_TIME",
	"BY",
	"WITHOUT",
	"VECTOR",
	"LABEL_REPLACE",
	"IP",
	"UNPACK",
	"PATTERN",
	"OFFSET",
	"BYTES_CONV",
	"DURATION_CONV",
	"DURATION_SECONDS_CONV",
	"ON",
	"IGNORING",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"DECOLORIZE",
	"OR",
	"AND",
	"UNLESS",
	"CMP_EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}

var exprStatenames = [...]string{}

const exprEofCode = 1
const exprErrCode = 2
const exprInitialStackSize = 16

var exprExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const exprPrivate = 57344

const exprLast = 645

var exprAct = [...]int{
	183, 67, 56, 55, 171, 4, 157, 5, 94, 75,
	7, 109, 3, 48, 65, 115, 2, 45, 46, 47,
	48, 64, 40, 41, 42, 49, 50, 53, 54, 51,
	52, 43, 44, 45, 46, 47, 48, 41, 42, 49,
	50, 53, 54, 51, 52, 43, 44, 45, 46, 47,
	48, 43, 44, 45, 46, 47, 48, 148, 93, 49,
	50, 53, 54, 51, 52, 43, 44, 45, 46, 47,
	48, 148, 111, 78, 112, 185, 119, 113, 120, 160,
	162, 163, 277, 278, 273, 274, 62, 125, 127, 128,
	257, 258, 311, 129, 268, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 145, 241,
	62, 147, 146, 60, 61, 58, 324, 177, 245, 186,
	65, 203, 181, 323, 182, 179, 146, 64, 217, 254,
	255, 300, 62, 190, 214, 62, 105, 60, 61, 58,
	244, 62, 68, 69, 161, 166, 167, 164, 165, 63,
	149, 172, 126, 66, 295, 197, 198, 199, 178, 60,
	61, 58, 60, 61, 58, 62, 234, 233, 60, 61,
	58, 219, 206, 63, 62, 282, 204, 212, 213, 210,
	93, 211, 215, 216, 113, 209, 220, 169, 185, 68,
	69, 106, 60, 61, 58, 63, 227, 229, 63, 104,
	270, 60, 61, 58, 63, 309, 239, 269, 232, 238,
	151, 152, 153, 172, 240, 242, 294, 169, 93, 93,
	222, 246, 235, 320, 247, 185, 248, 222, 63, 185,
	319, 265, 96, 99, 95, 263, 170, 63, 101, 103,
	98, 262, 305, 264, 222, 266, 303, 318, 172, 93,
	222, 222, 222, 317, 314, 313, 97, 100, 222, 222,
	222, 308, 307, 256, 259, 283, 102, 284, 185, 185,
	285, 185, 249, 243, 237, 185, 291, 293, 172, 222,
	297, 299, 253, 221, 11, 298, 296, 207, 292, 304,
	306, 14, 290, 176, 175, 310, 312, 8, 185, 15,
	16, 17, 30, 31, 33, 34, 32, 35, 36, 37,
	38, 18, 19, 108, 222, 230, 185, 224, 222, 107,
	185, 223, 185, 20, 21, 22, 23, 24, 25, 26,
	27, 28, 29, 228, 289, 39, 10, 187, 173, 184,
	124, 174, 288, 280, 130, 131, 279, 11, 276, 275,
	260, 236, 200, 196, 14, 195, 168, 118, 12, 13,
	8, 117, 15, 16, 17, 30, 31, 33, 34, 32,
	35, 36, 37, 38, 18, 19, 116, 70, 316, 315,
	287, 286, 201, 252, 122, 251, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 148, 121, 39, 10,
	123, 218, 189, 188, 202, 208, 72, 71, 267, 322,
	11, 321, 302, 301, 281, 272, 271, 14, 261, 226,
	225, 12, 13, 114, 205, 15, 16, 17, 30, 31,
	33, 34, 32, 35, 36, 37, 38, 18, 19, 194,
	193, 192, 191, 156, 155, 154, 74, 250, 76, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 158,
	231, 39, 10, 104, 76, 150, 9, 73, 6, 57,
	59, 159, 1, 180, 0, 0, 0, 0, 0, 0,
	14, 0, 0, 0, 12, 13, 8, 0, 15, 16,
	17, 30, 31, 33, 34, 32, 35, 36, 37, 38,
	18, 19, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 20, 21, 22, 23, 24, 25, 26, 27,
	28, 29, 0, 0, 39, 10, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 14, 0, 0, 0, 12, 13, 114,
	0, 15, 16, 17, 30, 31, 33, 34, 32, 35,
	36, 37, 38, 18, 19, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 20, 21, 22, 23, 24,
	25, 26, 27, 28, 29, 14, 0, 39, 10, 77,
	0, 8, 0, 15, 16, 17, 30, 31, 33, 34,
	32, 35, 36, 37, 38, 18, 19, 0, 0, 0,
	12, 13, 0, 0, 0, 0, 0, 20, 21, 22,
	23, 24, 25, 26, 27, 28, 29, 0, 0, 39,
	10, 79, 80, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 91, 92,
}

var exprPact = [...]int{
	340, -1000, -50, -1000, -1000, -1000, -1000, 161, 571, 133,
	357, -1000, 400, 399, 444, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 161, -1000, -1000, 195, 131,
	-1000, -1000, -1000, -1000, 298, 292, 529, 356, 341, 337,
	340, -1000, -1000, 382, 325, -1000, 76, 277, -1000, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, -1000, 39, -1000, -1000, -1000, 146, 440,
	439, 438, -1000, 455, 68, -1000, 336, -1000, -1000, 215,
	320, 273, 272, 152, 571, -50, 466, 318, 316, 385,
	384, -1000, -1000, 460, -1000, 437, 436, 435, 434, -36,
	335, 333, -16, -16, -66, -66, -73, -73, -73, -73,
	-30, -30, -30, -30, -30, -30, 459, 459, 459, -1000,
	332, -1000, -1000, -1000, -1000, -1000, -1000, 364, 393, 116,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 419, -1000,
	86, 266, 397, 403, -1000, 86, 86, 128, 161, 122,
	383, 150, 262, 300, -1000, -1000, 296, -1000, 415, 414,
	-1000, -1000, -1000, -1000, -1000, 312, 294, 378, 53, 39,
	456, 455, 162, -1000, 331, 253, -1000, 86, -1000, 185,
	88, 252, -1000, -1000, -1000, 161, 119, 97, 340, -1000,
	251, -1000, 443, -1000, -1000, 367, 365, 261, 60, 242,
	21, 243, 364, -1000, -1000, 330, 413, -1000, -1000, 86,
	214, 86, 210, 86, 402, -1000, 73, 186, 179, -1000,
	-1000, 411, 410, 15, 329, 328, 13, 326, 323, -1000,
	409, 154, -1000, 86, -1000, 86, -1000, -1000, 86, -1000,
	-1000, 363, 362, 322, 314, 271, 267, 196, 134, 265,
	264, 110, -1000, -1000, -1000, -1000, 408, 407, 225, 221,
	-1000, 241, -1000, 240, 184, 71, -1000, 234, -1000, 233,
	-1000, 361, 360, -1000, 232, -1000, 226, -1000, -1000, -1000,
	209, -1000, 202, -1000, -1000, 406, 404, -1000, -1000, -1000,
	-1000, 102, 95, -1000, -1000,
}

var exprPgo = [...]int{
	0, 472, 589, 471, 15, 470, 0, 7, 469, 8,
	6, 12, 5, 468, 3, 2, 11, 4, 9, 467,
	466, 10, 1, 465,
}

var exprR1 = [...]int{
	0, 1, 4, 4, 4, 4, 11, 11, 11, 14,
	14, 23, 23, 23, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 8, 8, 9, 9,
	9, 9, 9, 10, 10, 10, 10, 17, 16, 16,
	16, 16, 16, 16, 16, 16, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 13, 13, 13,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 21, 21, 21, 19, 19, 18, 18, 18,
	18, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 5, 5, 5, 5,
	3, 3, 3, 3, 3, 3, 3, 3, 6, 6,
	22, 22, 22, 22,
}

var exprR2 = [...]int{
	0, 1, 1, 1, 1, 1, 1, 2, 3, 1,
	2, 1, 1, 1, 1, 2, 2, 2, 2, 3,
	6, 3, 3, 3, 2, 3, 2, 5, 3, 6,
	3, 3, 3, 3, 3, 6, 3, 2, 2, 3,
	3, 4, 5, 5, 6, 2, 4, 5, 6, 7,
	7, 8, 5, 6, 5, 4, 6, 7, 8, 7,
	5, 6, 12, 5, 4, 6, 7, 7, 5, 12,
	4, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 1, 2, 2,
	0, 1, 5, 8, 9, 8, 9, 4, 7, 8,
	7, 8, 5, 8, 9, 8, 9, 4, 7, 8,
	7, 8, 3, 3, 3, 1, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 3, 3,
}

var exprChk = [...]int{
	-1000, -1, -4, -11, -12, -7, -13, -21, 20, -20,
	59, 7, 81, 82, 14, 22, 23, 24, 34, 35,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	25, 26, 29, 27, 28, 30, 31, 32, 33, 58,
	72, 73, 74, 81, 82, 83, 84, 85, 86, 75,
	76, 79, 80, 77, 78, -14, -15, -8, 42, -5,
	40, 41, 13, 76, -11, -12, 20, -22, 56, 57,
	20, 7, 7, -19, 2, -18, 4, -2, 36, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -15, -9, 39, 37, 61, 45, 38,
	62, 43, 71, 44, 4, 5, 60, 21, 21, -16,
	7, -12, -7, -21, 20, -4, 20, 20, 20, -12,
	-7, 15, 2, 18, 15, 11, 76, 12, 13, -4,
	67, 68, -4, -4, -4, -4, -4, -4, -4, -4,
	-4, -4, -4, -4, -4, -4, 73, 72, 18, 4,
	-23, 64, 65, 66, 5, 5, 5, -10, 4, -3,
	11, 76, 12, 13, 79, 80, 77, 78, 20, 2,
	21, -17, 63, 18, 21, 21, 21, -14, 6, -21,
	7, -12, -7, -6, 21, 4, -6, 21, 18, 18,
	-18, 5, 5, 5, 5, 20, 20, -9, -9, -9,
	20, 18, 11, 5, 60, 5, -22, 21, 8, -16,
	-12, -7, -22, -22, 6, -14, -14, 6, 18, 21,
	-17, 21, 18, 21, 21, 5, 5, -6, 21, -6,
	21, 4, -10, 5, 4, 60, 20, 21, -22, 21,
	-17, 21, -17, 21, 21, 21, -14, -12, -7, 21,
	4, 18, 18, 21, 69, 70, 21, 69, 70, 21,
	20, 5, -22, 21, -22, 21, -22, 6, 21, 21,
	21, 5, 5, 69, 70, 20, 20, 69, 70, 20,
	20, 5, 21, -22, -22, -22, 18, 18, 20, 20,
	21, -6, 21, -6, 20, 20, 21, -6, 21, -6,
	21, 5, 5, 21, -6, 21, -6, 21, 21, 21,
	-6, 21, -6, 21, 21, 18, 18, 21, 21, 21,
	21, 5, 5, 21, 21,
}

var exprDef = [...]int{
	0, -2, 1, 2, 3, 4, 5, 6, 0, 0,
	0, 87, 0, 0, 0, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 141, 142, 143, 144, 145,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 7, 9, 14, 0, 0,
	146, 147, 148, 149, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 0, 115, 0, 0, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 10, 15, 16, 17, 18, 0, 0,
	0, 0, 24, 0, 0, 26, 0, 8, 71, 0,
	87, 3, 4, 6, 0, 0, 0, 0, 0, 3,
	4, 112, 113, 0, 114, 0, 0, 0, 0, 72,
	0, 0, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 0, 0, 0, 19,
	0, 11, 12, 13, 21, 22, 23, 25, 0, 0,
	150, 151, 152, 153, 154, 155, 156, 157, 0, 45,
	46, 0, 0, 0, 70, 55, 64, 7, 38, 6,
	87, 3, 4, 0, 162, 158, 0, 163, 0, 0,
	116, 117, 118, 119, 120, 0, 0, 30, 31, 32,
	0, 0, 0, 28, 0, 0, 52, 47, 37, 0,
	3, 4, 54, 63, 40, 39, 0, 0, 0, 60,
	0, 68, 0, 160, 161, 0, 0, 0, 97, 0,
	107, 0, 36, 33, 34, 0, 0, 27, 53, 48,
	0, 56, 0, 65, 0, 41, 0, 3, 4, 61,
	159, 0, 0, 92, 0, 0, 102, 0, 0, 20,
	0, 0, 49, 50, 57, 0, 66, 43, 42, 59,
	67, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 29, 51, 58, 44, 0, 0, 0, 0,
	98, 0, 100, 0, 0, 0, 108, 0, 110, 0,
	35, 0, 0, 93, 0, 95, 0, 99, 101, 103,
	0, 105, 0, 109, 111, 0, 0, 94, 96, 104,
	106, 0, 0, 62, 69,
}

var exprTok1 = [...]int{
	1,
}

var exprTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86,
}

var exprTok3 = [...]int{
	0,
}

var exprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	exprDebug        = 0
	exprErrorVerbose = false
)

type exprLexer interface {
	Lex(lval *exprSymType) int
	Error(s string)
}

type exprParser interface {
	Parse(exprLexer) int
	Lookahead() int
}

type exprParserImpl struct {
	lval  exprSymType
	stack [exprInitialStackSize]exprSymType
	char  int
}

func (p *exprParserImpl) Lookahead() int {
	return p.char
}

func exprNewParser() exprParser {
	return &exprParserImpl{}
}

const exprFlag = -1000

func exprTokname(c int) string {
	if c >= 1 && c-1 < len(exprToknames) {
		if exprToknames[c-1] != "" {
			return exprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func exprStatname(s int) string {
	if s >= 0 && s < len(exprStatenames) {
		if exprStatenames[s] != "" {
			return exprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func exprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !exprErrorVerbose {
		return "syntax error"
	}

	for _, e := range exprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + exprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := exprPact[state]
	for tok := TOKSTART; tok-1 < len(exprToknames); tok++ {
		if n := base + tok; n >= 0 && n < exprLast && exprChk[exprAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if exprDef[state] == -2 {
		i := 0
		for exprExca[i] != -1 || exprExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; exprExca[i] >= 0; i += 2 {
			tok := exprExca[i]
			if tok < TOKSTART || exprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if exprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += exprTokname(tok)
	}
	return res
}

func exprlex1(lex exprLexer, lval *exprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = exprTok1[0]
		goto out
	}
	if char < len(exprTok1) {
		token = exprTok1[char]
		goto out
	}
	if char >= exprPrivate {
		if char < exprPrivate+len(exprTok2) {
			token = exprTok2[char-exprPrivate]
			goto out
		}
	}
	for i := 0; i < len(exprTok3); i += 2 {
		token = exprTok3[i+0]
		if token == char {
			token = exprTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = exprTok2[1] /* unknown char */
	}
	if exprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", exprTokname(token), uint(char))
	}
	return char, token
}

func exprParse(exprlex exprLexer) int {
	return exprNewParser().Parse(exprlex)
}

func (exprrcvr *exprParserImpl) Parse(exprlex exprLexer) int {
	var exprn int
	var exprVAL exprSymType
	var exprDollar []exprSymType
	_ = exprDollar // silence set and not used
	exprS := exprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	exprstate := 0
	exprrcvr.char = -1
	exprtoken := -1 // exprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		exprstate = -1
		exprrcvr.char = -1
		exprtoken = -1
	}()
	exprp := -1
	goto exprstack

ret0:
	return 0

ret1:
	return 1

exprstack:
	/* put a state and value onto the stack */
	if exprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", exprTokname(exprtoken), exprStatname(exprstate))
	}

	exprp++
	if exprp >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprS[exprp] = exprVAL
	exprS[exprp].yys = exprstate

exprnewstate:
	exprn = exprPact[exprstate]
	if exprn <= exprFlag {
		goto exprdefault /* simple state */
	}
	if exprrcvr.char < 0 {
		exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
	}
	exprn += exprtoken
	if exprn < 0 || exprn >= exprLast {
		goto exprdefault
	}
	exprn = exprAct[exprn]
	if exprChk[exprn] == exprtoken { /* valid shift */
		exprrcvr.char = -1
		exprtoken = -1
		exprVAL = exprrcvr.lval
		exprstate = exprn
		if Errflag > 0 {
			Errflag--
		}
		goto exprstack
	}

exprdefault:
	/* default state action */
	exprn = exprDef[exprstate]
	if exprn == -2 {
		if exprrcvr.char < 0 {
			exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if exprExca[xi+0] == -1 && exprExca[xi+1] == exprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			exprn = exprExca[xi+0]
			if exprn < 0 || exprn == exprtoken {
				break
			}
		}
		exprn = exprExca[xi+1]
		if exprn < 0 {
			goto ret0
		}
	}
	if exprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			exprlex.Error(exprErrorMessage(exprstate, exprtoken))
			Nerrs++
			if exprDebug >= 1 {
				__yyfmt__.Printf("%s", exprStatname(exprstate))
				__yyfmt__.Printf(" saw %s\n", exprTokname(exprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for exprp >= 0 {
				exprn = exprPact[exprS[exprp].yys] + exprErrCode
				if exprn >= 0 && exprn < exprLast {
					exprstate = exprAct[exprn] /* simulate a shift of "error" */
					if exprChk[exprstate] == exprErrCode {
						goto exprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if exprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", exprS[exprp].yys)
				}
				exprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if exprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", exprTokname(exprtoken))
			}
			if exprtoken == exprEofCode {
				goto ret1
			}
			exprrcvr.char = -1
			exprtoken = -1
			goto exprnewstate /* try again in the same state */
		}
	}

	/* reduction by production exprn */
	if exprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", exprn, exprStatname(exprstate))
	}

	exprnt := exprn
	exprpt := exprp
	_ = exprpt // guard against "declared and not used"

	exprp -= exprR2[exprn]
	// exprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if exprp+1 >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprVAL = exprS[exprp+1]

	/* consult goto table to find next state */
	exprn = exprR1[exprn]
	exprg := exprPgo[exprn]
	exprj := exprg + exprS[exprp].yys + 1

	if exprj >= exprLast {
		exprstate = exprAct[exprg]
	} else {
		exprstate = exprAct[exprj]
		if exprChk[exprstate] != -exprn {
			exprstate = exprAct[exprg]
		}
	}
	// dummy call; replaced with literal code
	switch exprnt {

	case 1:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprlex.(*parser).expr = exprDollar[1].Expr
		}
	case 2:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Expr = exprDollar[1].LogQueryExpr
		}
	case 3:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Expr = exprDollar[1].LogMetricExpr
		}
	case 4:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Expr = exprDollar[1].LogBinaryOpExpr
		}
	case 5:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Expr = exprDollar[1].LogNumberExpr
		}
	case 6:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogQueryExpr = newStreamMatcherExpr(exprDollar[1].Selector)
		}
	case 7:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogQueryExpr = newLogQueryExpr(newStreamMatcherExpr(exprDollar[1].Selector), exprDollar[2].LogPipelineExpr)
		}
	case 8:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogQueryExpr = exprDollar[2].LogQueryExpr
		}
	case 9:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogPipelineExpr = LogPipelineExpr{exprDollar[1].LogStageExpr}
		}
	case 10:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogPipelineExpr = append(exprDollar[1].LogPipelineExpr, exprDollar[2].LogStageExpr)
		}
	case 11:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ConvOp = OpConvBytes
		}
	case 12:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ConvOp = OpConvDuration
		}
	case 13:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ConvOp = OpConvDurationSeconds
		}
	case 14:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogStageExpr = exprDollar[1].LogFilterExpr
		}
	case 15:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogStageExpr = exprDollar[2].LogLabelFilterExpr
		}
	case 16:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogParserExpr(ParserLogFMT, "", "")
		}
	case 17:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogParserExpr(ParserJSON, "", "")
		}
	case 18:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogParserExpr(ParserUnpack, "", "")
		}
	case 19:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogParserExpr(ParserUnwrap, exprDollar[3].str, "")
		}
	case 20:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogParserExpr(ParserUnwrap, exprDollar[5].str, exprDollar[3].ConvOp)
		}
	case 21:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogParserExpr(ParserRegExp, exprDollar[3].str, "")
		}
	case 22:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogParserExpr(ParserPattern, exprDollar[3].str, "")
		}
	case 23:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogParserExpr(ParserLineFormat, exprDollar[3].str, "")
		}
	case 24:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogDecolorizeExpr()
		}
	case 25:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogStageExpr = exprDollar[3].LogFormatExpr
		}
	case 26:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogFilterExpr = newLogFilterExpr(exprDollar[1].Filter, "", exprDollar[2].str)
		}
	case 27:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogFilterExpr = newLogFilterExpr(exprDollar[1].Filter, OpIP, exprDollar[4].str)
		}
	case 28:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogLabelFilterExpr = newLogLabelFilter(exprDollar[1].str, exprDollar[2].ComparisonOp, "", exprDollar[3].str)
		}
	case 29:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogLabelFilterExpr = newLogLabelFilter(exprDollar[1].str, exprDollar[2].ComparisonOp, OpIP, exprDollar[5].str)
		}
	case 30:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogLabelFilterExpr = exprDollar[1].LogLabelFilterExpr.chain("and", exprDollar[3].LogLabelFilterExpr)
		}
	case 31:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogLabelFilterExpr = exprDollar[1].LogLabelFilterExpr.chain("or", exprDollar[3].LogLabelFilterExpr)
		}
	case 32:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogLabelFilterExpr = exprDollar[1].LogLabelFilterExpr.chain(",", exprDollar[3].LogLabelFilterExpr)
		}
	case 33:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogFormatExpr = newLogFormatExpr("", LogFormatValues{exprDollar[1].str: LogFormatValue{Value: exprDollar[3].str}}, "")
		}
	case 34:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogFormatExpr = newLogFormatExpr("", LogFormatValues{exprDollar[1].str: LogFormatValue{Value: exprDollar[3].str, IsIdentifier: true}}, "")
		}
	case 35:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogFormatExpr = newLogFormatExpr("", LogFormatValues{exprDollar[1].str: LogFormatValue{Value: OpIP + "(" + exprDollar[5].str + ")"}}, "")
		}
	case 36:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogFormatExpr = newLogFormatExpr(",", mergeLogFormatValues(exprDollar[1].LogFormatExpr.kv, exprDollar[3].LogFormatExpr.kv), "")
		}
	case 37:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogOffsetExpr = newLogOffsetExpr(exprDollar[2].duration)
		}
	case 38:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[1].Selector), nil), exprDollar[2].str, nil, false)
		}
	case 39:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[1].Selector), exprDollar[3].LogPipelineExpr), exprDollar[2].str, nil, false)
		}
	case 40:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[1].Selector), exprDollar[2].LogPipelineExpr), exprDollar[3].str, nil, true)
		}
	case 41:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[2].Selector), nil), exprDollar[3].str, nil, false)
		}
	case 42:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[2].Selector), exprDollar[4].LogPipelineExpr), exprDollar[3].str, nil, false)
		}
	case 43:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[2].Selector), exprDollar[3].LogPipelineExpr), exprDollar[5].str, nil, true)
		}
	case 44:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[2].Selector), exprDollar[4].LogPipelineExpr), exprDollar[3].str, exprDollar[6].Grouping, false)
		}
	case 46:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[3].LogRangeQueryExpr, exprDollar[1].MetricOp, "", nil, false, nil, nil)
		}
	case 47:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[3].LogRangeQueryExpr, exprDollar[1].MetricOp, "", nil, false, nil, exprDollar[4].LogOffsetExpr)
		}
	case 48:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[5].LogRangeQueryExpr, exprDollar[1].MetricOp, exprDollar[3].str, nil, false, nil, nil)
		}
	case 49:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[5].LogRangeQueryExpr, exprDollar[1].MetricOp, exprDollar[3].str, exprDollar[7].Grouping, false, nil, nil)
		}
	case 50:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[5].LogRangeQueryExpr, exprDollar[1].MetricOp, exprDollar[3].str, nil, false, nil, exprDollar[6].LogOffsetExpr)
		}
	case 51:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[5].LogRangeQueryExpr, exprDollar[1].MetricOp, exprDollar[3].str, exprDollar[8].Grouping, false, nil, exprDollar[6].LogOffsetExpr)
		}
	case 52:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[3].LogRangeQueryExpr, "", "", exprDollar[5].Grouping, false, nil, nil)
		}
	case 53:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[3].LogRangeQueryExpr, "", "", exprDollar[6].Grouping, false, nil, exprDollar[4].LogOffsetExpr)
		}
	case 54:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogMetricExpr, nil, exprDollar[1].MetricOp, "", exprDollar[5].Grouping, false, nil, nil)
		}
	case 55:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogMetricExpr, nil, exprDollar[1].MetricOp, "", nil, false, nil, nil)
		}
	case 56:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[5].LogMetricExpr, nil, exprDollar[1].MetricOp, exprDollar[3].str, nil, false, nil, nil)
		}
	case 57:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[5].LogMetricExpr, nil, exprDollar[1].MetricOp, exprDollar[3].str, exprDollar[7].Grouping, false, nil, nil)
		}
	case 58:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[5].LogMetricExpr, nil, exprDollar[1].MetricOp, exprDollar[3].str, exprDollar[8].Grouping, false, nil, exprDollar[6].LogOffsetExpr)
		}
	case 59:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[6].LogMetricExpr, nil, exprDollar[1].MetricOp, exprDollar[4].str, exprDollar[2].Grouping, true, nil, nil)
		}
	case 60:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[4].LogMetricExpr, nil, exprDollar[1].MetricOp, "", exprDollar[2].Grouping, true, nil, nil)
		}
	case 61:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[4].LogMetricExpr, nil, exprDollar[1].MetricOp, "", exprDollar[2].Grouping, true, nil, exprDollar[5].LogOffsetExpr)
		}
	case 62:
		exprDollar = exprS[exprpt-12 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogMetricExpr, nil, OpLabelReplace, "", nil, false, []string{exprDollar[5].str, exprDollar[7].str, exprDollar[9].str, exprDollar[11].str}, nil)
		}
	case 63:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogBinaryOpExpr, nil, exprDollar[1].MetricOp, "", exprDollar[5].Grouping, false, nil, nil)
		}
	case 64:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogBinaryOpExpr, nil, exprDollar[1].MetricOp, "", nil, false, nil, nil)
		}
	case 65:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[5].LogBinaryOpExpr, nil, exprDollar[1].MetricOp, exprDollar[3].str, nil, false, nil, nil)
		}
	case 66:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[5].LogBinaryOpExpr, nil, exprDollar[1].MetricOp, exprDollar[3].str, exprDollar[7].Grouping, false, nil, nil)
		}
	case 67:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[6].LogBinaryOpExpr, nil, exprDollar[1].MetricOp, exprDollar[4].str, exprDollar[2].Grouping, true, nil, nil)
		}
	case 68:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[4].LogBinaryOpExpr, nil, exprDollar[1].MetricOp, "", exprDollar[2].Grouping, true, nil, nil)
		}
	case 69:
		exprDollar = exprS[exprpt-12 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogBinaryOpExpr, nil, OpLabelReplace, "", nil, false, []string{exprDollar[5].str, exprDollar[7].str, exprDollar[9].str, exprDollar[11].str}, nil)
		}
	case 70:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(newVectorExpr(exprDollar[3].str), nil, OpTypeVector, "", nil, false, nil, nil)
		}
	case 71:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogMetricExpr = exprDollar[2].LogMetricExpr
		}
	case 72:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("or", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 73:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("and", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 74:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("unless", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 75:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("+", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 76:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("-", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 77:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("*", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 78:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("/", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 79:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("%", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 80:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("^", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 81:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("==", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 82:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("!=", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 83:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr(">", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 84:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr(">=", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 85:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("<", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 86:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("<=", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 87:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogNumberExpr = newLogNumberExpr(exprDollar[1].str, false)
		}
	case 88:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogNumberExpr = newLogNumberExpr(exprDollar[2].str, false)
		}
	case 89:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogNumberExpr = newLogNumberExpr(exprDollar[2].str, true)
		}
	case 90:
		exprDollar = exprS[exprpt-0 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = BinaryOpOptions{}
		}
	case 91:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = BinaryOpOptions{ReturnBool: true}
		}
	case 92:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true, Labels: exprDollar[4].Labels}
		}
	case 93:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true, Labels: exprDollar[4].Labels, GroupingType: GroupLeftOption}
		}
	case 94:
		exprDollar = exprS[exprpt-9 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true, Labels: exprDollar[4].Labels, GroupingType: GroupLeftOption, IncludeLabels: exprDollar[8].Labels}
		}
	case 95:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true, Labels: exprDollar[4].Labels, GroupingType: GroupRightOption}
		}
	case 96:
		exprDollar = exprS[exprpt-9 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true, Labels: exprDollar[4].Labels, GroupingType: GroupRightOption, IncludeLabels: exprDollar[8].Labels}
		}
	case 97:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true}
		}
	case 98:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true, GroupingType: GroupLeftOption}
		}
	case 99:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true, GroupingType: GroupLeftOption, IncludeLabels: exprDollar[7].Labels}
		}
	case 100:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true, GroupingType: GroupRightOption}
		}
	case 101:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true, GroupingType: GroupRightOption, IncludeLabels: exprDollar[7].Labels}
		}
	case 102:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true, Labels: exprDollar[4].Labels}
		}
	case 103:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true, Labels: exprDollar[4].Labels, GroupingType: GroupLeftOption}
		}
	case 104:
		exprDollar = exprS[exprpt-9 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true, Labels: exprDollar[4].Labels, GroupingType: GroupLeftOption, IncludeLabels: exprDollar[8].Labels}
		}
	case 105:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true, Labels: exprDollar[4].Labels, GroupingType: GroupRightOption}
		}
	case 106:
		exprDollar = exprS[exprpt-9 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true, Labels: exprDollar[4].Labels, GroupingType: GroupRightOption, IncludeLabels: exprDollar[8].Labels}
		}
	case 107:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true}
		}
	case 108:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true, GroupingType: GroupLeftOption}
		}
	case 109:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true, GroupingType: GroupLeftOption, IncludeLabels: exprDollar[7].Labels}
		}
	case 110:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true, GroupingType: GroupRightOption}
		}
	case 111:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true, GroupingType: GroupRightOption, IncludeLabels: exprDollar[7].Labels}
		}
	case 112:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 113:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 114:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
		}
	case 115:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Matchers = []*labels.Matcher{exprDollar[1].Matcher}
		}
	case 116:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matchers = append(exprDollar[1].Matchers, exprDollar[3].Matcher)
		}
	case 117:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = newLabelMatcher(labels.MatchEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 118:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = newLabelMatcher(labels.MatchNotEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 119:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = newLabelMatcher(labels.MatchRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 120:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = newLabelMatcher(labels.MatchNotRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 121:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeCount
		}
	case 122:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeRate
		}
	case 123:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeRateCounter
		}
	case 124:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeBytes
		}
	case 125:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeBytesRate
		}
	case 126:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeAvg
		}
	case 127:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeSum
		}
	case 128:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeMin
		}
	case 129:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeMax
		}
	case 130:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeStdvar
		}
	case 131:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeStddev
		}
	case 132:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeQuantile
		}
	case 133:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeFirst
		}
	case 134:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeLast
		}
	case 135:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeAbsent
		}
	case 136:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeSum
		}
	case 137:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeAvg
		}
	case 138:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeCount
		}
	case 139:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeMax
		}
	case 140:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeMin
		}
	case 141:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeStddev
		}
	case 142:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeStdvar
		}
	case 143:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeBottomK
		}
	case 144:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeTopK
		}
	case 145:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = OpTypeVector
		}
	case 146:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = "|~"
		}
	case 147:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = "|="
		}
	case 148:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = "!~"
		}
	case 149:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = "!="
		}
	case 150:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = "="
		}
	case 151:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = "!="
		}
	case 152:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = "=~"
		}
	case 153:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = "!~"
		}
	case 154:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = ">"
		}
	case 155:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = ">="
		}
	case 156:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = "<"
		}
	case 157:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = "<="
		}
	case 158:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Labels = []string{exprDollar[1].str}
		}
	case 159:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Labels = append(exprDollar[1].Labels, exprDollar[3].str)
		}
	case 160:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.Grouping = &grouping{without: false, groups: exprDollar[3].Labels}
		}
	case 161:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.Grouping = &grouping{without: true, groups: exprDollar[3].Labels}
		}
	case 162:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Grouping = &grouping{without: false, groups: nil}
		}
	case 163:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Grouping = &grouping{without: true, groups: nil}
		}
	}
	goto exprstack /* stack new state and value */
}
