// Code generated by goyacc -p expr -o logql/v2/expr.y.go logql/v2/expr.y. DO NOT EDIT.

package v2

import (
	__yyfmt__ "fmt"
	"time"

	"github.com/prometheus/prometheus/model/labels"
)

type exprSymType struct {
	yys                int
	Expr               Expr
	LogBinaryOpExpr    LogBinaryOpExpr
	LogFilterExpr      *LogFilterExpr
	LogLabelFilterExpr *LogLabelFilterExpr
	LogFormatExpr      *LogFormatExpr
	LogQueryExpr       LogSelectorExpr
	LogMetricExpr      LogMetricSampleExpr
	LogNumberExpr      LogNumberExpr
	LogPipelineExpr    LogPipelineExpr
	LogStageExpr       LogStageExpr
	LogRangeQueryExpr  LogSelectorExpr
	LogOffsetExpr      *LogOffsetExpr
	LogDropLabels      LogLabelList
	LogKeepLabels      LogLabelList
	LogFMTLabels       LogLabelList
	LogFMTFlags        []string
	Matcher            *labels.Matcher
	Matchers           []*labels.Matcher
	MetricOp           string
	BinaryOpOptions    BinaryOpOptions
	Range              string
	Filter             string
	Selector           []*labels.Matcher
	Grouping           *grouping
	Labels             []string
	str                string
	binaryOp           string
	ComparisonOp       string
	duration           time.Duration
	ConvOp             string
}

const IDENTIFIER = 57346
const STRING = 57347
const RANGE = 57348
const NUMBER = 57349
const LOGFMTSTRICT = 57350
const LOGFMTKEEPEMPTY = 57351
const DURATION = 57352
const MATCHERS = 57353
const LABELS = 57354
const EQ = 57355
const RE = 57356
const NRE = 57357
const OPEN_BRACE = 57358
const CLOSE_BRACE = 57359
const OPEN_BRACKET = 57360
const CLOSE_BRACKET = 57361
const COMMA = 57362
const DOT = 57363
const OPEN_PARENTHESIS = 57364
const CLOSE_PARENTHESIS = 57365
const COUNT_OVER_TIME = 57366
const RATE = 57367
const RATE_COUNTER = 57368
const SUM = 57369
const AVG = 57370
const MAX = 57371
const MIN = 57372
const COUNT = 57373
const STDDEV = 57374
const STDVAR = 57375
const BOTTOMK = 57376
const TOPK = 57377
const SORT = 57378
const SORT_DESC = 57379
const BYTES_OVER_TIME = 57380
const BYTES_RATE = 57381
const BOOL = 57382
const JSON = 57383
const REGEXP = 57384
const LOGFMT = 57385
const PIPE_MATCH = 57386
const PIPE_EXACT = 57387
const PIPE_MATCH_PATTERN = 57388
const PIPE_NOT_MATCH_PATTERN = 57389
const PIPE = 57390
const LINE_FMT = 57391
const LABEL_FMT = 57392
const UNWRAP = 57393
const AVG_OVER_TIME = 57394
const SUM_OVER_TIME = 57395
const MIN_OVER_TIME = 57396
const MAX_OVER_TIME = 57397
const STDVAR_OVER_TIME = 57398
const STDDEV_OVER_TIME = 57399
const QUANTILE_OVER_TIME = 57400
const FIRST_OVER_TIME = 57401
const LAST_OVER_TIME = 57402
const ABSENT_OVER_TIME = 57403
const BY = 57404
const WITHOUT = 57405
const VECTOR = 57406
const LABEL_REPLACE = 57407
const IP = 57408
const UNPACK = 57409
const PATTERN = 57410
const OFFSET = 57411
const BYTES_CONV = 57412
const DURATION_CONV = 57413
const DURATION_SECONDS_CONV = 57414
const ON = 57415
const IGNORING = 57416
const GROUP_LEFT = 57417
const GROUP_RIGHT = 57418
const DECOLORIZE = 57419
const DROP = 57420
const KEEP = 57421
const OR = 57422
const AND = 57423
const UNLESS = 57424
const CMP_EQ = 57425
const NEQ = 57426
const LT = 57427
const LTE = 57428
const GT = 57429
const GTE = 57430
const ADD = 57431
const SUB = 57432
const MUL = 57433
const DIV = 57434
const MOD = 57435
const POW = 57436

var exprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"RANGE",
	"NUMBER",
	"LOGFMTSTRICT",
	"LOGFMTKEEPEMPTY",
	"DURATION",
	"MATCHERS",
	"LABELS",
	"EQ",
	"RE",
	"NRE",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_BRACKET",
	"CLOSE_BRACKET",
	"COMMA",
	"DOT",
	"OPEN_PARENTHESIS",
	"CLOSE_PARENTHESIS",
	"COUNT_OVER_TIME",
	"RATE",
	"RATE_COUNTER",
	"SUM",
	"AVG",
	"MAX",
	"MIN",
	"COUNT",
	"STDDEV",
	"STDVAR",
	"BOTTOMK",
	"TOPK",
	"SORT",
	"SORT_DESC",
	"BYTES_OVER_TIME",
	"BYTES_RATE",
	"BOOL",
	"JSON",
	"REGEXP",
	"LOGFMT",
	"PIPE_MATCH",
	"PIPE_EXACT",
	"PIPE_MATCH_PATTERN",
	"PIPE_NOT_MATCH_PATTERN",
	"PIPE",
	"LINE_FMT",
	"LABEL_FMT",
	"UNWRAP",
	"AVG_OVER_TIME",
	"SUM_OVER_TIME",
	"MIN_OVER_TIME",
	"MAX_OVER_TIME",
	"STDVAR_OVER_TIME",
	"STDDEV_OVER_TIME",
	"QUANTILE_OVER_TIME",
	"FIRST_OVER_TIME",
	"LAST_OVER_TIME",
	"ABSENT_OVER_TIME",
	"BY",
	"WITHOUT",
	"VECTOR",
	"LABEL_REPLACE",
	"IP",
	"UNPACK",
	"PATTERN",
	"OFFSET",
	"BYTES_CONV",
	"DURATION_CONV",
	"DURATION_SECONDS_CONV",
	"ON",
	"IGNORING",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"DECOLORIZE",
	"DROP",
	"KEEP",
	"OR",
	"AND",
	"UNLESS",
	"CMP_EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}

var exprStatenames = [...]string{}

const exprEofCode = 1
const exprErrCode = 2
const exprInitialStackSize = 16

var exprExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const exprPrivate = 57344

const exprLast = 644

var exprAct = [...]int{
	198, 70, 59, 58, 186, 4, 169, 5, 170, 152,
	167, 113, 6, 8, 165, 98, 119, 2, 217, 50,
	182, 78, 308, 309, 57, 42, 43, 44, 51, 52,
	55, 56, 53, 54, 45, 46, 47, 48, 49, 50,
	43, 44, 51, 52, 55, 56, 53, 54, 45, 46,
	47, 48, 49, 50, 45, 46, 47, 48, 49, 50,
	67, 97, 51, 52, 55, 56, 53, 54, 45, 46,
	47, 48, 49, 50, 271, 115, 151, 116, 81, 123,
	356, 124, 355, 117, 47, 48, 49, 50, 332, 63,
	64, 65, 66, 61, 304, 305, 314, 132, 200, 135,
	136, 137, 138, 139, 140, 141, 142, 143, 144, 145,
	146, 147, 148, 128, 130, 131, 172, 343, 153, 151,
	187, 192, 247, 201, 11, 352, 196, 228, 197, 68,
	287, 288, 194, 14, 205, 57, 150, 149, 313, 7,
	327, 15, 16, 17, 30, 31, 33, 34, 32, 35,
	36, 37, 38, 39, 40, 18, 19, 224, 301, 11,
	284, 285, 225, 216, 184, 212, 213, 214, 111, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 300,
	149, 41, 10, 184, 129, 269, 226, 231, 229, 296,
	133, 134, 237, 238, 235, 97, 236, 240, 241, 96,
	234, 245, 117, 200, 185, 294, 12, 13, 244, 200,
	157, 252, 254, 174, 176, 177, 71, 72, 227, 261,
	260, 247, 341, 247, 351, 256, 350, 289, 337, 112,
	172, 187, 264, 263, 268, 259, 200, 279, 326, 270,
	272, 12, 13, 97, 97, 247, 276, 273, 349, 277,
	187, 278, 69, 200, 187, 335, 42, 43, 44, 51,
	52, 55, 56, 53, 54, 45, 46, 47, 48, 49,
	50, 293, 330, 295, 267, 297, 159, 160, 161, 97,
	247, 262, 246, 346, 175, 180, 181, 178, 179, 232,
	200, 247, 71, 72, 345, 191, 315, 247, 316, 247,
	340, 317, 339, 190, 321, 320, 200, 323, 325, 328,
	247, 329, 331, 286, 11, 242, 247, 247, 67, 283,
	249, 336, 338, 14, 67, 324, 299, 342, 344, 7,
	311, 15, 16, 17, 30, 31, 33, 34, 32, 35,
	36, 37, 38, 39, 40, 18, 19, 63, 64, 65,
	66, 61, 310, 63, 64, 65, 66, 61, 200, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 307,
	200, 41, 10, 247, 306, 200, 248, 322, 188, 239,
	221, 189, 290, 11, 266, 265, 219, 68, 67, 255,
	211, 210, 14, 68, 253, 348, 12, 13, 118, 183,
	15, 16, 17, 30, 31, 33, 34, 32, 35, 36,
	37, 38, 39, 40, 18, 19, 67, 63, 64, 65,
	66, 61, 122, 200, 275, 200, 121, 120, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 126, 73,
	41, 10, 202, 347, 199, 63, 64, 65, 66, 61,
	193, 319, 195, 125, 318, 223, 127, 68, 222, 67,
	220, 14, 215, 282, 218, 12, 13, 7, 281, 15,
	16, 17, 30, 31, 33, 34, 32, 35, 36, 37,
	38, 39, 40, 18, 19, 68, 67, 151, 63, 64,
	65, 66, 61, 243, 274, 204, 203, 20, 21, 22,
	23, 24, 25, 26, 27, 28, 29, 79, 154, 41,
	10, 233, 155, 156, 75, 63, 64, 65, 66, 61,
	77, 114, 298, 155, 156, 74, 354, 353, 68, 334,
	14, 333, 312, 303, 12, 13, 118, 302, 15, 16,
	17, 30, 31, 33, 34, 32, 35, 36, 37, 38,
	39, 40, 18, 19, 110, 68, 292, 291, 257, 251,
	250, 230, 209, 208, 207, 206, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 164, 163, 41, 10,
	162, 280, 171, 168, 166, 258, 80, 154, 110, 79,
	158, 100, 103, 99, 9, 76, 3, 60, 62, 105,
	107, 102, 173, 12, 13, 1, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 108, 109,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95,
}

var exprPact = [...]int{
	307, -1000, -55, -1000, -1000, -1000, -1000, 307, 45, 230,
	417, -1000, 518, 507, 503, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 176, 45, -1000,
	-1000, 550, 163, -1000, -1000, -1000, -1000, -1000, -1000, 514,
	405, 404, 400, 307, -1000, -1000, 436, -1000, -1000, 100,
	117, -1000, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, -1000, -1000, 56, 504,
	-1000, -1000, 206, 575, 572, 571, -1000, 580, 579, 578,
	200, -60, 377, 181, 358, 280, 272, 444, 307, -55,
	445, 421, 419, 476, 475, -1000, -1000, 585, 560, 559,
	558, 557, -41, 369, 368, -21, -21, -7, -7, -75,
	-75, -75, -75, -35, -35, -35, -35, -35, -35, 584,
	584, 584, 442, 504, 451, -1000, -1000, -1000, 364, -1000,
	-1000, -1000, -1000, -1000, -1000, 440, 367, 438, 100, -1000,
	435, 100, -1000, 152, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 122, 556, -1000, 154, 266, 501, 376, -1000,
	154, 154, 373, 45, 309, 473, 185, 259, 353, -1000,
	-1000, 297, -1000, 555, 554, -1000, -1000, -1000, -1000, -1000,
	371, 366, 467, 99, 56, 583, 442, 515, 553, 581,
	580, 215, 579, 578, -1000, -1000, -1000, 363, -1000, 362,
	251, -1000, 154, -1000, 162, 51, 224, -1000, -1000, -1000,
	45, 471, 401, 307, -1000, 214, -1000, 577, -1000, -1000,
	448, 443, 296, 85, 290, 55, 442, -1000, 204, 440,
	-1000, -1000, 360, 438, 435, 552, 551, -1000, -1000, 154,
	182, 154, 166, 154, 516, -1000, 303, 156, 135, -1000,
	-1000, 532, 528, 19, 352, 347, -53, 330, 308, -1000,
	527, 115, 73, -1000, 154, -1000, 154, -1000, -1000, 154,
	-1000, -1000, 434, 431, 283, 282, 354, 302, 216, 118,
	286, 249, 65, -1000, -1000, -1000, -1000, -1000, 526, 524,
	232, 205, -1000, 279, -1000, 277, 199, 94, -1000, 271,
	-1000, 260, -1000, 423, 375, -1000, 225, -1000, 203, -1000,
	-1000, -1000, 201, -1000, 102, -1000, -1000, 522, 521, -1000,
	-1000, -1000, -1000, 59, 57, -1000, -1000,
}

var exprPgo = [...]int{
	0, 605, 586, 602, 16, 598, 0, 7, 597, 15,
	14, 596, 5, 12, 3, 2, 11, 4, 10, 8,
	9, 18, 6, 595, 594, 13, 1, 590,
}

var exprR1 = [...]int{
	0, 1, 4, 4, 4, 4, 4, 11, 11, 14,
	14, 27, 27, 27, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	8, 8, 8, 8, 9, 9, 9, 9, 9, 9,
	9, 10, 10, 10, 10, 17, 16, 16, 16, 16,
	16, 16, 16, 16, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 13, 13, 13, 18, 18, 18,
	19, 19, 19, 20, 20, 20, 21, 21, 21, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 25, 25, 25, 23, 23, 22, 22, 22, 22,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 5, 5, 5,
	5, 5, 5, 3, 3, 3, 3, 3, 3, 3,
	3, 6, 6, 26, 26, 26, 26,
}

var exprR2 = [...]int{
	0, 1, 1, 1, 1, 1, 3, 1, 2, 1,
	2, 1, 1, 1, 1, 2, 2, 3, 4, 2,
	2, 3, 6, 3, 3, 3, 2, 3, 3, 3,
	2, 5, 4, 7, 3, 3, 3, 6, 3, 3,
	3, 3, 3, 6, 3, 2, 2, 3, 3, 4,
	5, 5, 6, 2, 4, 5, 6, 7, 7, 8,
	5, 6, 5, 4, 6, 7, 8, 7, 5, 6,
	12, 5, 4, 6, 7, 7, 5, 12, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 1, 2, 2, 1, 1, 3,
	1, 1, 3, 1, 3, 3, 1, 1, 2, 0,
	1, 5, 8, 9, 8, 9, 4, 7, 8, 7,
	8, 5, 8, 9, 8, 9, 4, 7, 8, 7,
	8, 3, 3, 2, 1, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 4, 4, 3, 3,
}

var exprChk = [...]int{
	-1000, -1, -4, -11, -12, -7, -13, 22, -25, -24,
	65, 7, 89, 90, 16, 24, 25, 26, 38, 39,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	27, 28, 31, 29, 30, 32, 33, 34, 35, 36,
	37, 64, 80, 81, 82, 89, 90, 91, 92, 93,
	94, 83, 84, 87, 88, 85, 86, -4, -14, -15,
	-8, 48, -5, 44, 45, 46, 47, 15, 84, 22,
	-26, 62, 63, 22, 7, 7, -23, 17, -22, 4,
	-2, 40, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 23, -15, -9, 43,
	41, 67, 51, 42, 68, 49, 77, 50, 78, 79,
	4, 5, 66, -16, 7, -12, -7, -25, 22, -4,
	22, 22, 22, -12, -7, 17, 2, 20, 13, 84,
	14, 15, -4, 73, 74, -4, -4, -4, -4, -4,
	-4, -4, -4, -4, -4, -4, -4, -4, -4, 81,
	80, 20, -20, -21, 4, 8, 9, 4, -27, 70,
	71, 72, 5, 5, 5, -10, 4, -18, 4, -22,
	-19, 4, -22, -3, 13, 84, 14, 15, 87, 88,
	85, 86, 80, 22, 2, 23, -17, 69, 20, 23,
	23, 23, -14, 6, -25, 7, -12, -7, -6, 23,
	4, -6, 23, 20, 20, -22, 5, 5, 5, 5,
	22, 22, -9, -9, -9, 20, -20, -21, 13, 22,
	20, 13, 20, 20, 5, 10, -13, 66, 5, 66,
	5, -26, 23, 10, -16, -12, -7, -26, -26, 6,
	-14, -14, 6, 20, 23, -17, 23, 20, 23, 23,
	5, 5, -6, 23, -6, 23, -20, 5, 4, -10,
	5, 4, 66, -18, -19, 22, 22, 23, -26, 23,
	-17, 23, -17, 23, 23, 23, -14, -12, -7, 23,
	4, 20, 20, 23, 75, 76, 23, 75, 76, 23,
	22, 5, 5, -26, 23, -26, 23, -26, 6, 23,
	23, 23, 5, 5, 75, 76, 22, 22, 75, 76,
	22, 22, 5, 23, 23, -26, -26, -26, 20, 20,
	22, 22, 23, -6, 23, -6, 22, 22, 23, -6,
	23, -6, 23, 5, 5, 23, -6, 23, -6, 23,
	23, 23, -6, 23, -6, 23, 23, 20, 20, 23,
	23, 23, 23, 5, 5, 23, 23,
}

var exprDef = [...]int{
	0, -2, 1, 2, 3, 4, 5, 0, 7, 0,
	0, 94, 0, 0, 0, 140, 141, 142, 143, 144,
	145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
	165, 166, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 0, 8, 9,
	14, 0, 0, 167, 168, 169, 170, 171, 172, 0,
	0, 0, 0, 0, 95, 96, 0, 133, 134, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 6, 10, 15, 16,
	19, 20, 0, 0, 0, 0, 26, 0, 0, 0,
	0, 30, 0, 0, 94, 3, 4, 7, 0, 0,
	0, 0, 0, 3, 4, 131, 132, 0, 0, 0,
	0, 0, 79, 0, 0, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 0,
	0, 0, 17, 0, 103, 106, 107, 21, 0, 11,
	12, 13, 23, 24, 25, 27, 0, 28, 97, 98,
	29, 100, 101, 0, 173, 174, 175, 176, 177, 178,
	179, 180, 0, 0, 53, 54, 0, 0, 0, 78,
	63, 72, 8, 46, 7, 94, 3, 4, 0, 185,
	181, 0, 186, 0, 0, 135, 136, 137, 138, 139,
	0, 0, 38, 39, 40, 0, 18, 108, 0, 0,
	0, 0, 0, 0, 34, 35, 36, 0, 32, 0,
	0, 60, 55, 45, 0, 3, 4, 62, 71, 48,
	47, 8, 0, 0, 68, 0, 76, 0, 183, 184,
	0, 0, 0, 116, 0, 126, 105, 104, 0, 44,
	41, 42, 0, 99, 102, 0, 0, 31, 61, 56,
	0, 64, 0, 73, 0, 49, 0, 3, 4, 69,
	182, 0, 0, 111, 0, 0, 121, 0, 0, 22,
	0, 0, 0, 57, 58, 65, 0, 74, 51, 50,
	67, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 37, 33, 59, 66, 52, 0, 0,
	0, 0, 117, 0, 119, 0, 0, 0, 127, 0,
	129, 0, 43, 0, 0, 112, 0, 114, 0, 118,
	120, 122, 0, 124, 0, 128, 130, 0, 0, 113,
	115, 123, 125, 0, 0, 70, 77,
}

var exprTok1 = [...]int{
	1,
}

var exprTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94,
}

var exprTok3 = [...]int{
	0,
}

var exprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	exprDebug        = 0
	exprErrorVerbose = false
)

type exprLexer interface {
	Lex(lval *exprSymType) int
	Error(s string)
}

type exprParser interface {
	Parse(exprLexer) int
	Lookahead() int
}

type exprParserImpl struct {
	lval  exprSymType
	stack [exprInitialStackSize]exprSymType
	char  int
}

func (p *exprParserImpl) Lookahead() int {
	return p.char
}

func exprNewParser() exprParser {
	return &exprParserImpl{}
}

const exprFlag = -1000

func exprTokname(c int) string {
	if c >= 1 && c-1 < len(exprToknames) {
		if exprToknames[c-1] != "" {
			return exprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func exprStatname(s int) string {
	if s >= 0 && s < len(exprStatenames) {
		if exprStatenames[s] != "" {
			return exprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func exprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !exprErrorVerbose {
		return "syntax error"
	}

	for _, e := range exprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + exprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := exprPact[state]
	for tok := TOKSTART; tok-1 < len(exprToknames); tok++ {
		if n := base + tok; n >= 0 && n < exprLast && exprChk[exprAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if exprDef[state] == -2 {
		i := 0
		for exprExca[i] != -1 || exprExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; exprExca[i] >= 0; i += 2 {
			tok := exprExca[i]
			if tok < TOKSTART || exprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if exprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += exprTokname(tok)
	}
	return res
}

func exprlex1(lex exprLexer, lval *exprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = exprTok1[0]
		goto out
	}
	if char < len(exprTok1) {
		token = exprTok1[char]
		goto out
	}
	if char >= exprPrivate {
		if char < exprPrivate+len(exprTok2) {
			token = exprTok2[char-exprPrivate]
			goto out
		}
	}
	for i := 0; i < len(exprTok3); i += 2 {
		token = exprTok3[i+0]
		if token == char {
			token = exprTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = exprTok2[1] /* unknown char */
	}
	if exprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", exprTokname(token), uint(char))
	}
	return char, token
}

func exprParse(exprlex exprLexer) int {
	return exprNewParser().Parse(exprlex)
}

func (exprrcvr *exprParserImpl) Parse(exprlex exprLexer) int {
	var exprn int
	var exprVAL exprSymType
	var exprDollar []exprSymType
	_ = exprDollar // silence set and not used
	exprS := exprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	exprstate := 0
	exprrcvr.char = -1
	exprtoken := -1 // exprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		exprstate = -1
		exprrcvr.char = -1
		exprtoken = -1
	}()
	exprp := -1
	goto exprstack

ret0:
	return 0

ret1:
	return 1

exprstack:
	/* put a state and value onto the stack */
	if exprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", exprTokname(exprtoken), exprStatname(exprstate))
	}

	exprp++
	if exprp >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprS[exprp] = exprVAL
	exprS[exprp].yys = exprstate

exprnewstate:
	exprn = exprPact[exprstate]
	if exprn <= exprFlag {
		goto exprdefault /* simple state */
	}
	if exprrcvr.char < 0 {
		exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
	}
	exprn += exprtoken
	if exprn < 0 || exprn >= exprLast {
		goto exprdefault
	}
	exprn = exprAct[exprn]
	if exprChk[exprn] == exprtoken { /* valid shift */
		exprrcvr.char = -1
		exprtoken = -1
		exprVAL = exprrcvr.lval
		exprstate = exprn
		if Errflag > 0 {
			Errflag--
		}
		goto exprstack
	}

exprdefault:
	/* default state action */
	exprn = exprDef[exprstate]
	if exprn == -2 {
		if exprrcvr.char < 0 {
			exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if exprExca[xi+0] == -1 && exprExca[xi+1] == exprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			exprn = exprExca[xi+0]
			if exprn < 0 || exprn == exprtoken {
				break
			}
		}
		exprn = exprExca[xi+1]
		if exprn < 0 {
			goto ret0
		}
	}
	if exprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			exprlex.Error(exprErrorMessage(exprstate, exprtoken))
			Nerrs++
			if exprDebug >= 1 {
				__yyfmt__.Printf("%s", exprStatname(exprstate))
				__yyfmt__.Printf(" saw %s\n", exprTokname(exprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for exprp >= 0 {
				exprn = exprPact[exprS[exprp].yys] + exprErrCode
				if exprn >= 0 && exprn < exprLast {
					exprstate = exprAct[exprn] /* simulate a shift of "error" */
					if exprChk[exprstate] == exprErrCode {
						goto exprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if exprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", exprS[exprp].yys)
				}
				exprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if exprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", exprTokname(exprtoken))
			}
			if exprtoken == exprEofCode {
				goto ret1
			}
			exprrcvr.char = -1
			exprtoken = -1
			goto exprnewstate /* try again in the same state */
		}
	}

	/* reduction by production exprn */
	if exprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", exprn, exprStatname(exprstate))
	}

	exprnt := exprn
	exprpt := exprp
	_ = exprpt // guard against "declared and not used"

	exprp -= exprR2[exprn]
	// exprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if exprp+1 >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprVAL = exprS[exprp+1]

	/* consult goto table to find next state */
	exprn = exprR1[exprn]
	exprg := exprPgo[exprn]
	exprj := exprg + exprS[exprp].yys + 1

	if exprj >= exprLast {
		exprstate = exprAct[exprg]
	} else {
		exprstate = exprAct[exprj]
		if exprChk[exprstate] != -exprn {
			exprstate = exprAct[exprg]
		}
	}
	// dummy call; replaced with literal code
	switch exprnt {

	case 1:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprlex.(*parser).expr = exprDollar[1].Expr
		}
	case 2:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Expr = exprDollar[1].LogQueryExpr
		}
	case 3:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Expr = exprDollar[1].LogMetricExpr
		}
	case 4:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Expr = exprDollar[1].LogBinaryOpExpr
		}
	case 5:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Expr = exprDollar[1].LogNumberExpr
		}
	case 6:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Expr = newParenthesisExpr(exprDollar[2].Expr)
		}
	case 7:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogQueryExpr = newLogQueryExpr(newStreamMatcherExpr(exprDollar[1].Selector), nil)
		}
	case 8:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogQueryExpr = newLogQueryExpr(newStreamMatcherExpr(exprDollar[1].Selector), exprDollar[2].LogPipelineExpr)
		}
	case 9:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogPipelineExpr = LogPipelineExpr{exprDollar[1].LogStageExpr}
		}
	case 10:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogPipelineExpr = append(exprDollar[1].LogPipelineExpr, exprDollar[2].LogStageExpr)
		}
	case 11:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ConvOp = OpConvBytes
		}
	case 12:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ConvOp = OpConvDuration
		}
	case 13:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ConvOp = OpConvDurationSeconds
		}
	case 14:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogStageExpr = exprDollar[1].LogFilterExpr
		}
	case 15:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogStageExpr = exprDollar[2].LogLabelFilterExpr
		}
	case 16:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogParserExpr(ParserLogFMT, "", "")
		}
	case 17:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogLabelExpr(ParserLogFMT, nil, exprDollar[3].LogFMTLabels)
		}
	case 18:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogLabelExpr(ParserLogFMT, exprDollar[3].LogFMTFlags, exprDollar[4].LogFMTLabels)
		}
	case 19:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogParserExpr(ParserJSON, "", "")
		}
	case 20:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogParserExpr(ParserUnpack, "", "")
		}
	case 21:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogParserExpr(ParserUnwrap, exprDollar[3].str, "")
		}
	case 22:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogParserExpr(ParserUnwrap, exprDollar[5].str, exprDollar[3].ConvOp)
		}
	case 23:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogParserExpr(ParserRegExp, exprDollar[3].str, "")
		}
	case 24:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogParserExpr(ParserPattern, exprDollar[3].str, "")
		}
	case 25:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogParserExpr(ParserLineFormat, exprDollar[3].str, "")
		}
	case 26:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogDecolorizeExpr()
		}
	case 27:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogStageExpr = exprDollar[3].LogFormatExpr
		}
	case 28:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogLabelExpr(ParserDrop, nil, exprDollar[3].LogDropLabels)
		}
	case 29:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogStageExpr = newLogLabelExpr(ParserKeep, nil, exprDollar[3].LogKeepLabels)
		}
	case 30:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogFilterExpr = newLogFilterExpr(exprDollar[1].Filter, "", exprDollar[2].str)
		}
	case 31:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogFilterExpr = newLogFilterExpr(exprDollar[1].Filter, OpIP, exprDollar[4].str)
		}
	case 32:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogFilterExpr = newLogFilterExpr(exprDollar[1].Filter, "", exprDollar[2].str).chain("or", newLogFilterExpr(exprDollar[1].Filter, "", exprDollar[4].str))
		}
	case 33:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogFilterExpr = newLogFilterExpr(exprDollar[1].Filter, "", exprDollar[2].str).chain("or", newLogFilterExpr(exprDollar[1].Filter, OpIP, exprDollar[6].str))
		}
	case 34:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogLabelFilterExpr = newLogLabelFilter(exprDollar[1].str, exprDollar[2].ComparisonOp, "", newLogLabelFilterValue(TypeText, nil, exprDollar[3].str, 0))
		}
	case 35:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogLabelFilterExpr = newLogLabelFilter(exprDollar[1].str, exprDollar[2].ComparisonOp, "", newLogLabelFilterValue(TypeDuration, nil, "", exprDollar[3].duration))
		}
	case 36:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogLabelFilterExpr = newLogLabelFilter(exprDollar[1].str, exprDollar[2].ComparisonOp, "", newLogLabelFilterValue(TypeNumber, &exprDollar[3].LogNumberExpr, "", 0))
		}
	case 37:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogLabelFilterExpr = newLogLabelFilter(exprDollar[1].str, exprDollar[2].ComparisonOp, OpIP, newLogLabelFilterValue(TypeText, nil, exprDollar[5].str, 0))
		}
	case 38:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogLabelFilterExpr = exprDollar[1].LogLabelFilterExpr.chain("and", exprDollar[3].LogLabelFilterExpr)
		}
	case 39:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogLabelFilterExpr = exprDollar[1].LogLabelFilterExpr.chain("or", exprDollar[3].LogLabelFilterExpr)
		}
	case 40:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogLabelFilterExpr = exprDollar[1].LogLabelFilterExpr.chain(",", exprDollar[3].LogLabelFilterExpr)
		}
	case 41:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogFormatExpr = newLogFormatExpr("", LogFormatValues{exprDollar[1].str: LogFormatValue{Value: exprDollar[3].str}}, "")
		}
	case 42:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogFormatExpr = newLogFormatExpr("", LogFormatValues{exprDollar[1].str: LogFormatValue{Value: exprDollar[3].str, IsIdentifier: true}}, "")
		}
	case 43:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogFormatExpr = newLogFormatExpr("", LogFormatValues{exprDollar[1].str: LogFormatValue{Value: OpIP + "(" + exprDollar[5].str + ")"}}, "")
		}
	case 44:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogFormatExpr = newLogFormatExpr(",", mergeLogFormatValues(exprDollar[1].LogFormatExpr.kv, exprDollar[3].LogFormatExpr.kv), "")
		}
	case 45:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogOffsetExpr = newLogOffsetExpr(exprDollar[2].duration)
		}
	case 46:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[1].Selector), nil), exprDollar[2].str, nil, false)
		}
	case 47:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[1].Selector), exprDollar[3].LogPipelineExpr), exprDollar[2].str, nil, false)
		}
	case 48:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[1].Selector), exprDollar[2].LogPipelineExpr), exprDollar[3].str, nil, true)
		}
	case 49:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[2].Selector), nil), exprDollar[3].str, nil, false)
		}
	case 50:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[2].Selector), exprDollar[4].LogPipelineExpr), exprDollar[3].str, nil, false)
		}
	case 51:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[2].Selector), exprDollar[3].LogPipelineExpr), exprDollar[5].str, nil, true)
		}
	case 52:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogRangeQueryExpr = newLogRangeQueryExpr(newLogQueryExpr(newStreamMatcherExpr(exprDollar[2].Selector), exprDollar[4].LogPipelineExpr), exprDollar[3].str, exprDollar[6].Grouping, false)
		}
	case 54:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[3].LogRangeQueryExpr, exprDollar[1].MetricOp, "", nil, false, nil, nil)
		}
	case 55:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[3].LogRangeQueryExpr, exprDollar[1].MetricOp, "", nil, false, nil, exprDollar[4].LogOffsetExpr)
		}
	case 56:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[5].LogRangeQueryExpr, exprDollar[1].MetricOp, exprDollar[3].str, nil, false, nil, nil)
		}
	case 57:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[5].LogRangeQueryExpr, exprDollar[1].MetricOp, exprDollar[3].str, exprDollar[7].Grouping, false, nil, nil)
		}
	case 58:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[5].LogRangeQueryExpr, exprDollar[1].MetricOp, exprDollar[3].str, nil, false, nil, exprDollar[6].LogOffsetExpr)
		}
	case 59:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[5].LogRangeQueryExpr, exprDollar[1].MetricOp, exprDollar[3].str, exprDollar[8].Grouping, false, nil, exprDollar[6].LogOffsetExpr)
		}
	case 60:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[3].LogRangeQueryExpr, "", "", exprDollar[5].Grouping, false, nil, nil)
		}
	case 61:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(nil, exprDollar[3].LogRangeQueryExpr, "", "", exprDollar[6].Grouping, false, nil, exprDollar[4].LogOffsetExpr)
		}
	case 62:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogMetricExpr, nil, exprDollar[1].MetricOp, "", exprDollar[5].Grouping, false, nil, nil)
		}
	case 63:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogMetricExpr, nil, exprDollar[1].MetricOp, "", nil, false, nil, nil)
		}
	case 64:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[5].LogMetricExpr, nil, exprDollar[1].MetricOp, exprDollar[3].str, nil, false, nil, nil)
		}
	case 65:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[5].LogMetricExpr, nil, exprDollar[1].MetricOp, exprDollar[3].str, exprDollar[7].Grouping, false, nil, nil)
		}
	case 66:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[5].LogMetricExpr, nil, exprDollar[1].MetricOp, exprDollar[3].str, exprDollar[8].Grouping, false, nil, exprDollar[6].LogOffsetExpr)
		}
	case 67:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[6].LogMetricExpr, nil, exprDollar[1].MetricOp, exprDollar[4].str, exprDollar[2].Grouping, true, nil, nil)
		}
	case 68:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[4].LogMetricExpr, nil, exprDollar[1].MetricOp, "", exprDollar[2].Grouping, true, nil, nil)
		}
	case 69:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[4].LogMetricExpr, nil, exprDollar[1].MetricOp, "", exprDollar[2].Grouping, true, nil, exprDollar[5].LogOffsetExpr)
		}
	case 70:
		exprDollar = exprS[exprpt-12 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogMetricExpr, nil, OpLabelReplace, "", nil, false, []string{exprDollar[5].str, exprDollar[7].str, exprDollar[9].str, exprDollar[11].str}, nil)
		}
	case 71:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogBinaryOpExpr, nil, exprDollar[1].MetricOp, "", exprDollar[5].Grouping, false, nil, nil)
		}
	case 72:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogBinaryOpExpr, nil, exprDollar[1].MetricOp, "", nil, false, nil, nil)
		}
	case 73:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[5].LogBinaryOpExpr, nil, exprDollar[1].MetricOp, exprDollar[3].str, nil, false, nil, nil)
		}
	case 74:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[5].LogBinaryOpExpr, nil, exprDollar[1].MetricOp, exprDollar[3].str, exprDollar[7].Grouping, false, nil, nil)
		}
	case 75:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[6].LogBinaryOpExpr, nil, exprDollar[1].MetricOp, exprDollar[4].str, exprDollar[2].Grouping, true, nil, nil)
		}
	case 76:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[4].LogBinaryOpExpr, nil, exprDollar[1].MetricOp, "", exprDollar[2].Grouping, true, nil, nil)
		}
	case 77:
		exprDollar = exprS[exprpt-12 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(exprDollar[3].LogBinaryOpExpr, nil, OpLabelReplace, "", nil, false, []string{exprDollar[5].str, exprDollar[7].str, exprDollar[9].str, exprDollar[11].str}, nil)
		}
	case 78:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogMetricExpr = newLogMetricExpr(newVectorExpr(exprDollar[3].str), nil, OpTypeVector, "", nil, false, nil, nil)
		}
	case 79:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("or", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 80:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("and", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 81:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("unless", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 82:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("+", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 83:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("-", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 84:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("*", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 85:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("/", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 86:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("%", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 87:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("^", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 88:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("==", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 89:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("!=", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 90:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr(">", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 91:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr(">=", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 92:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("<", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 93:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.LogBinaryOpExpr = newLogBinaryOpExpr("<=", exprDollar[3].BinaryOpOptions, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 94:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogNumberExpr = newLogNumberExpr(exprDollar[1].str, false)
		}
	case 95:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogNumberExpr = newLogNumberExpr(exprDollar[2].str, false)
		}
	case 96:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogNumberExpr = newLogNumberExpr(exprDollar[2].str, true)
		}
	case 97:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogDropLabels = newLogLabelList(newLogLabel(exprDollar[1].str, nil))
		}
	case 98:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogDropLabels = newLogLabelList(newLogLabel("", exprDollar[1].Matcher))
		}
	case 99:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogDropLabels = mergeLabels(exprDollar[1].LogDropLabels, exprDollar[3].LogDropLabels)
		}
	case 100:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogKeepLabels = newLogLabelList(newLogLabel(exprDollar[1].str, nil))
		}
	case 101:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogKeepLabels = newLogLabelList(newLogLabel("", exprDollar[1].Matcher))
		}
	case 102:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogKeepLabels = mergeLabels(exprDollar[1].LogKeepLabels, exprDollar[3].LogKeepLabels)
		}
	case 103:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogFMTLabels = newLogLabelList(newLogLabel(exprDollar[1].str, nil))
		}
	case 104:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogFMTLabels = newLogLabelList(newLogLabel("", newLabelMatcher(labels.MatchEqual, exprDollar[1].str, exprDollar[3].str)))
		}
	case 105:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogFMTLabels = mergeLabels(exprDollar[1].LogFMTLabels, exprDollar[3].LogFMTLabels)
		}
	case 106:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogFMTFlags = []string{exprDollar[1].str}
		}
	case 107:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogFMTFlags = []string{exprDollar[1].str}
		}
	case 108:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogFMTFlags = mergeParserFlags(exprDollar[1].LogFMTFlags, exprDollar[2].LogFMTFlags)
		}
	case 109:
		exprDollar = exprS[exprpt-0 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = BinaryOpOptions{}
		}
	case 110:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = BinaryOpOptions{ReturnBool: true}
		}
	case 111:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true, Labels: exprDollar[4].Labels}
		}
	case 112:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true, Labels: exprDollar[4].Labels, GroupingType: GroupLeftOption}
		}
	case 113:
		exprDollar = exprS[exprpt-9 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true, Labels: exprDollar[4].Labels, GroupingType: GroupLeftOption, IncludeLabels: exprDollar[8].Labels}
		}
	case 114:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true, Labels: exprDollar[4].Labels, GroupingType: GroupRightOption}
		}
	case 115:
		exprDollar = exprS[exprpt-9 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true, Labels: exprDollar[4].Labels, GroupingType: GroupRightOption, IncludeLabels: exprDollar[8].Labels}
		}
	case 116:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true}
		}
	case 117:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true, GroupingType: GroupLeftOption}
		}
	case 118:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true, GroupingType: GroupLeftOption, IncludeLabels: exprDollar[7].Labels}
		}
	case 119:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true, GroupingType: GroupRightOption}
		}
	case 120:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.OnOption = OnOption{Enabled: true, GroupingType: GroupRightOption, IncludeLabels: exprDollar[7].Labels}
		}
	case 121:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true, Labels: exprDollar[4].Labels}
		}
	case 122:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true, Labels: exprDollar[4].Labels, GroupingType: GroupLeftOption}
		}
	case 123:
		exprDollar = exprS[exprpt-9 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true, Labels: exprDollar[4].Labels, GroupingType: GroupLeftOption, IncludeLabels: exprDollar[8].Labels}
		}
	case 124:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true, Labels: exprDollar[4].Labels, GroupingType: GroupRightOption}
		}
	case 125:
		exprDollar = exprS[exprpt-9 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true, Labels: exprDollar[4].Labels, GroupingType: GroupRightOption, IncludeLabels: exprDollar[8].Labels}
		}
	case 126:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true}
		}
	case 127:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true, GroupingType: GroupLeftOption}
		}
	case 128:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true, GroupingType: GroupLeftOption, IncludeLabels: exprDollar[7].Labels}
		}
	case 129:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true, GroupingType: GroupRightOption}
		}
	case 130:
		exprDollar = exprS[exprpt-8 : exprpt+1]
		{
			exprVAL.BinaryOpOptions = exprDollar[1].BinaryOpOptions
			exprVAL.BinaryOpOptions.IgnoringOption = IgnoringOption{Enabled: true, GroupingType: GroupRightOption, IncludeLabels: exprDollar[7].Labels}
		}
	case 131:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 132:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 133:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
		}
	case 134:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Matchers = []*labels.Matcher{exprDollar[1].Matcher}
		}
	case 135:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matchers = append(exprDollar[1].Matchers, exprDollar[3].Matcher)
		}
	case 136:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = newLabelMatcher(labels.MatchEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 137:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = newLabelMatcher(labels.MatchNotEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 138:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = newLabelMatcher(labels.MatchRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 139:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = newLabelMatcher(labels.MatchNotRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 140:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeCount
		}
	case 141:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeRate
		}
	case 142:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeRateCounter
		}
	case 143:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeBytes
		}
	case 144:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeBytesRate
		}
	case 145:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeAvg
		}
	case 146:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeSum
		}
	case 147:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeMin
		}
	case 148:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeMax
		}
	case 149:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeStdvar
		}
	case 150:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeStddev
		}
	case 151:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeQuantile
		}
	case 152:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeFirst
		}
	case 153:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeLast
		}
	case 154:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = RangeOpTypeAbsent
		}
	case 155:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeSum
		}
	case 156:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeAvg
		}
	case 157:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeCount
		}
	case 158:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeMax
		}
	case 159:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeMin
		}
	case 160:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeStddev
		}
	case 161:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeStdvar
		}
	case 162:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeBottomK
		}
	case 163:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeTopK
		}
	case 164:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeSort
		}
	case 165:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = VectorOpTypeSortDesc
		}
	case 166:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricOp = OpTypeVector
		}
	case 167:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = "|~"
		}
	case 168:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = "|="
		}
	case 169:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = "|>"
		}
	case 170:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = "!>"
		}
	case 171:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = "!~"
		}
	case 172:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = "!="
		}
	case 173:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = "="
		}
	case 174:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = "!="
		}
	case 175:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = "=~"
		}
	case 176:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = "!~"
		}
	case 177:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = ">"
		}
	case 178:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = ">="
		}
	case 179:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = "<"
		}
	case 180:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.ComparisonOp = "<="
		}
	case 181:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Labels = []string{exprDollar[1].str}
		}
	case 182:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Labels = append(exprDollar[1].Labels, exprDollar[3].str)
		}
	case 183:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.Grouping = &grouping{without: false, groups: exprDollar[3].Labels}
		}
	case 184:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.Grouping = &grouping{without: true, groups: exprDollar[3].Labels}
		}
	case 185:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Grouping = &grouping{without: false, groups: nil}
		}
	case 186:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Grouping = &grouping{without: true, groups: nil}
		}
	}
	goto exprstack /* stack new state and value */
}
